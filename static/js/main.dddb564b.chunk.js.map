{"version":3,"sources":["Components/TimelineItem.js","Components/Timeline.js","App.js","serviceWorker.js","index.js"],"names":["TimelineItem","data","className","style","background","category","color","tag","date","heading","subheading","text","duration","link","href","url","target","rel","Timeline","props","timelineData","length","map","idx","key","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOA+BeA,G,uBA5BM,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,yBACb,0BAAMA,UAAU,MAAMC,MAAO,CAAEC,WAAYH,EAAKI,SAASC,QACtDL,EAAKI,SAASE,KAEjB,wCACA,8BAAON,EAAKO,MACZ,4BAAKP,EAAKQ,SACV,4BAAI,2BAAIR,EAAKS,aACb,2BAAIT,EAAKU,MACT,0BAAMT,UAAU,YAAYD,EAAKW,UAChCX,EAAKY,MACJ,uBACEC,KAAMb,EAAKY,KAAKE,IAChBC,OAAO,SACPC,IAAI,uBAEHhB,EAAKY,KAAKF,MAGf,0BAAMT,UAAU,eCVTgB,EAXE,SAACC,GACd,OACAA,EAAMC,aAAaC,OAAS,GACxB,yBAAKnB,UAAU,sBACViB,EAAMC,aAAaE,KAAI,SAACrB,EAAMsB,GAAP,OACpB,kBAAC,EAAD,CAActB,KAAMA,EAAMuB,IAAKD,S,QCHzCH,EAAe,CACnB,CACIX,QAAS,UACTC,WAAY,4BACZC,KAAM,wKACNH,KAAM,gBACNI,SAAU,qCACVP,SAAU,CACNE,IAAK,0BACLD,MAAO,WAEXO,KAAM,CACFE,IACI,8BACJJ,KAAM,iBAGd,CACIF,QAAS,gCACTC,WAAY,qBACZC,KAAM,0PACNH,KAAM,kBACNI,SAAU,6BACVP,SAAU,CACNE,IAAK,oCACLD,MAAO,WAEXO,KAAM,CACFE,IACI,4BACJJ,KAAM,iBAGd,CACIF,QAAS,SACTC,WAAY,4BACZC,KAAM,oOACNH,KAAM,gBACNI,SAAU,4BACVP,SAAU,CACNE,IAAK,gCACLD,MAAO,WAEXO,KAAM,CACFE,IACI,yBACJJ,KAAM,kBAcDc,MATf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWxB,UAAU,YACrB,gCAAQ,yDACR,kBAAC,EAAD,CAAUkB,aAAcA,MCjDRO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dddb564b.chunk.js","sourcesContent":["import '../style/Timeline.css';\r\nimport React, { Component } from 'react';\r\n\r\nconst TimelineItem = ({ data }) => {\r\n  return (\r\n    <div className=\"timeline-item\">\r\n      <div className=\"timeline-item-content\">\r\n        <span className=\"tag\" style={{ background: data.category.color }}>\r\n          {data.category.tag}\r\n        </span>\r\n        <time>Joined</time>\r\n        <time>{data.date}</time>\r\n        <h4>{data.heading}</h4>\r\n        <h6><u>{data.subheading}</u></h6>\r\n        <p>{data.text}</p>\r\n        <span className='duration'>{data.duration}</span>\r\n        {data.link && (\r\n          <a\r\n            href={data.link.url}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {data.link.text}\r\n          </a>\r\n        )}\r\n        <span className=\"circle\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimelineItem;","import '../style/Timeline.css';\r\nimport TimelineItem from './TimelineItem';\r\nimport React, { Component } from 'react';\r\n\r\nconst Timeline = (props) => {\r\n    return (\r\n    props.timelineData.length > 0 && (\r\n        <div className=\"timeline-container\">\r\n            {props.timelineData.map((data, idx) => (\r\n                <TimelineItem data={data} key={idx} />\r\n            ))}\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default Timeline;\r\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Timeline from './Components/Timeline';\nimport { Container } from 'reactstrap';\n\nconst timelineData = [\n  {\n      heading: 'Ideabox',\n      subheading: 'Junior Software Developer',\n      text: 'I have worked here for a short period of time in which I created admin Dashboard for the existing project using ASP.NET(MVC), Bootstrap, and SQL Server for Database.',\n      date: 'July 02, 2018',\n      duration: 'July 02, 2018 till August 01, 2019',\n      category: {\n          tag: 'asp.net mvc, sql server',\n          color: '#253C78'\n      },\n      link: {\n          url:\n              'https://www.ideabox.com.pk/',\n          text: 'Company site'\n      }\n  },\n  {\n      heading: 'Integrated Dealership Systems',\n      subheading: 'Software Developer',\n      text: 'A product based Company which works in Dealership Industry. My Current Role in this job is to resolve bugs. The Product(ERP) that I work on is based on multiple technologies including .NET, Universe, PICK Basic, .NET Core API, React, React Native.',\n      date: 'August 02, 2018',\n      duration: 'August 02, 2018 till today',\n      category: {\n          tag: '.net, universe, react, PICK BASIC',\n          color: '#3454D1'\n      },\n      link: {\n          url:\n              'https://www.ids-astra.com',\n          text: 'Company site'\n      }\n  },\n  {\n      heading: 'Encore',\n      subheading: 'Web Developer (Part Time)',\n      text: 'The Company works in the payment industry from backend to frontend integration of Payment Systems. I\\'m Working as a Web Developer, developing different Single Page Applications using HTML, ASP.Net, JQuery, Bootstrap and More.',\n      date: 'April 15 2019',\n      duration: 'April 15, 2019 till today',\n      category: {\n          tag: 'HTML, css, javascript, jquery',\n          color: '#34D1BF'\n      },\n      link: {\n          url:\n              'http://encore-pay.com/',\n          text: 'Company site'\n      }\n  }\n];\n\nfunction App() {\n  return (\n    <Container className='bg-light' >\n    <center><h3>React Timeline Component</h3></center>\n    <Timeline timelineData={timelineData}></Timeline>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}